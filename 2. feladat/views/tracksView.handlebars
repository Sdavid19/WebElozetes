<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
</head>

<body>
    {{> navbar }}


    <div style="display: grid;place-items:center">
        {{> tableName }}
        <table class="table" id="table" style="max-width: 800px;">
            <tr>
                {{#keys}}
                <th class="text-center">{{ . }}</th>
                {{/keys}}
            </tr>

            <tr>
                <td>#</td>
                <td>
                    <input id="newName" type="text" class="form-control">
                </td>
                <td>
                    <input id="newAlbumId" type="number" class="form-control">
                </td>
                <td>
                    <input id="newMediaTypeId" type="number" class="form-control">
                </td>
                <td>
                    <input id="newGenreId" type="number" class="form-control">
                </td>
                <td>
                    <input id="newComposer" type="text" class="form-control">
                </td>
                <td>
                    <input id="newMillisenconds" type="text" class="form-control">
                </td>
                <td>
                    <input id="newBytes" type="text" class="form-control">
                </td>
                <td>
                    <input id="newUnitPrice" type="text" class="form-control">
                </td>
                <td>
                    <button class="btn btn-primary" onclick='createRecord()'>Create</button>
                </td>
            </tr>

            {{#data}}
            <tr id="{{ TrackId }}">
                <td>{{ TrackId }}</td>
                <td>
                    <input id="editName{{ TrackId }}" type="text" class="form-control" value="{{Name}}">
                </td>
                <td>
                    <input id="editAlbumId{{ TrackId }}" type="number" class="form-control" value="{{AlbumId}}">
                </td>
                <td>
                    <input id="MediaTypeId{{ TrackId }}" type="number" class="form-control" value="{{MediaTypeId}}">
                </td>
                <td>
                    <input id="editGenreId{{ TrackId }}" type="number" class="form-control" value="{{GenreId}}">
                </td>
                <td>
                    <input id="editComposer{{ TrackId }}" type="text" class="form-control" value="{{Composer}}">
                </td>
                <td>
                    <input id="editMillisenconds{{ TrackId }}" type="text" class="form-control" value="{{Milliseconds}}">
                </td>
                <td>
                    <input id="editBytes{{ TrackId }}" type="text" class="form-control" value="{{Bytes}}">
                </td>
                <td>
                    <input id="editUnitPrice{{ TrackId }}" type="text" class="form-control" value="{{UnitPrice}}">
                </td>
                <td><button class="btn btn-primary" onclick="updateRecord('{{ TrackId }}')">Edit</button></td>
                <td><button class="btn btn-danger" onclick="deleteRecord('{{ TrackId }}')">Delete</button></td>
            </tr>
            {{/data}}
        </table>
    </div>

    <script>
        async function deleteRecord(id) {
            try {

                const response = await fetch(`/tracks/delete/${id}`, {
                    method: 'DELETE',
                    headers: {
                        "Content-Type": "application/json",
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to delete data');
                }
                else {
                    document.getElementById(id).remove();
                }

            } catch (error) {
                console.error('Error deleting resource:', error.message);
            }
        }

        async function createRecord() {
            try {
                let name = document.getElementById('newName').value;
                let albumId = parseInt(document.getElementById('newAlbumId').value);
                let mediaTypeId = parseInt(document.getElementById('newMediaTypeId').value);
                let genreId = parseInt(document.getElementById('newGenreId').value);
                let composer = document.getElementById('newComposer').value;
                let ms = parseInt(document.getElementById('newMilliseconds').value);
                let bytes = parseInt(document.getElementById('newBytes').value);
                let unitPrice = parseFloat(document.getElementById('newUnitPrice').value);

                let data = {
                    Name: name,
                    AlbumId: albumId,
                    MediaTypeId: mediaTypeId,
                    GenreId: genreId,
                    Composer: composer,
                    Milliseconds: ms,
                    Bytes: bytes,
                    UnirPrice: unitPrice
                };

                const response = await fetch(`/tracks/insert`, {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error('Failed to insert data');
                }
                else {
                    location.reload();
                }

            } catch (error) {
                console.error('Error inserting resource:', error.message);
            }
        }


        async function updateRecord(id) {
            try {

                let name = document.getElementById(`editName${id}`).value;
                let albumId = parseInt(document.getElementById('editAlbumId${id}`).value);
                let mediaTypeId = parseInt(document.getElementById(`editMediaTypeId${id}`).value);
                let genreId = parseInt(document.getElementById(`editGenreId${id}`).value);
                let composer = document.getElementById(`editComposer${id}`).value;
                let ms = parseInt(document.getElementById(`editMilliseconds${id}`).value);
                let bytes = parseInt(document.getElementById(`editBytes${id}`).value);
                let unitPrice = parseFloat(document.getElementById(`editUnitPrice${id}`).value);

                let data = {
                    Name: name,
                    AlbumId: albumId,
                    MediaTypeId: mediaTypeId,
                    GenreId: genreId,
                    Composer: composer,
                    Milliseconds: ms,
                    Bytes: bytes,
                    UnirPrice: unitPrice
                };

                const response = await fetch(`/tracks/update/${id}`, {
                    method: 'PATCH',
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error('Failed to update data');
                }

            } catch (error) {
                console.error('Error update resource:', error.message);
            }
        }
    </script>

<style>
    input {
        min-width: 100px;
    }
</style>

</body>
</html>